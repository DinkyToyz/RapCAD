////
 *   RapCAD - Rapid prototyping CAD IDE (www.rapcad.org)
 *   Copyright (C) 2010  Giles Bathgate
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
////

User Guide
----------

For command line options see the link:manual.html[RapCAD manual]

Declarations
~~~~~~~~~~~~
A declaration is used to announce the existence of the element within the
document. They can be variables, constants, and parametric values.

Variables
^^^^^^^^^
A variable stores a value *which can change*. Variables are declared by
assigning them to a value. This could be a <<_literals,literal>> value, the
result of a <<_functions,function>> or simply another variable.

Examples
++++++++
[source,csharp]
------------------------------
a=1;
b=a;
a=2;
------------------------------

Constants
^^^^^^^^^
Constants are used to store values which should never change. A constant can be
assigned to a value once, but subsequent attempts to change the value of the
constant results in an error.

Examples
++++++++
[source,csharp]
------------------------------
const a=1;
b=a;
a=2; //error
------------------------------

Parametric Values
^^^^^^^^^^^^^^^^^
Parametric values are values which are intended to be changed. They are used
for variables that modify the design in a consistent way. For example if your
design was describing a gear you might use a parameteric value to represent the
number of teeth, but you would use a variable to store the value of the pitch.

Example
+++++++
[source,csharp]
------------------------------
param teeth=50;
pitch=teeth*m/cos(u);
------------------------------

Literals
~~~~~~~~
Literals are basic values that can be writtern into the document to represent
values that the design will use.

Undefined
^^^^^^^^^
The special value of 'undef' allows you to assign or compare values to nothing.

Examples
++++++++
[source,csharp]
------------------------------
a=undef;
if(a==undef) ...
------------------------------

Number
^^^^^^
Numbers can be used to represent any rational numerical value. They can be
integers, decimals, or negative numbers.

Examples
++++++++
[source,csharp]
------------------------------
a=1;
b=5.1;
c=-0.006;
d=.5;
------------------------------

Text
^^^^
Text can be used to represent writtern words or characters. Escape sequences
exist for tab, quote, return, newline and backslash.

Examples
++++++++
[source,csharp]
------------------------------
a="Hello World!\n";
a="The quick brown fox \tjumps \"over\" the lazy dog.\r\n";
a="C:\\Documents\\Shape.stl"
------------------------------

Boolean
^^^^^^^
Booleans can represent a value of true or false.

Examples
++++++++
[source,csharp]
------------------------------
a=True;
b=False;
------------------------------

Vector
^^^^^^
Vectors are used to represent lists of values. Vectors can be nested inside
other vectors. Vectors do not have to contain all values of the same type.

Examples
++++++++
[source,csharp]
-------------------------------------------------
a=[1.1,10,1.5];
b=[[1,2,3],[1,1,1],[15,12,2]];
c=[5,"Hello",[1,2,3]];
-------------------------------------------------

[NOTE]
===============================================================================
In RapCAD commas are not allowed at the end of a vector because it it often a
sign of error which arises from writing code in the following way.

[source,csharp]
---------------
a=[ 1,
    2,
    3,
  ];
---------------

This vector will have four elements instead of the intended three elements, the
last elelement being undefined. In the unlikely event that you really do want a
four element vector with the last element undefined then you can use the
'undef' keyword explicitly.

[source,csharp]
-------------------------------------------------
a=[,10,10]; // means [undef,10,10]
b=[10,10];  // means [10,10]
c=[10,,10]; // means [10,undef,10]
d=[10,10,]; // syntax error use [10,10,undef] <1>
-------------------------------------------------

<1> Since index out of bounds errors are not desired, RapCAD will treat vectors
containing less elements than expected as though the elements exist but are
undefined. Thus if we expect a 3D vector, but are given a 2D vector such as
[10,10] RapCAD will treat this as [10,10,undef] you can therefore treat
[10,10,undef] as synonymous to [10,10] so in the example above you could simply
write d=[10,10] if you prefer.
===============================================================================

Range
^^^^^
Range values are a more effficient way of representing a list of sequential
values. Rather than having to specify every value in the list, only the start
and end values need be specified. Optionally a value can be used to specify
the step by which each value should be incremented.

Examples
++++++++
[source,csharp]
------------------------------
a=[1:5];    // 1,2,3,4,5
b=[0:2:10]; // 2,4,6,8,10
------------------------------

Functions
~~~~~~~~~

Functions are used to group a set of statements together and calculate a value.

Function Declarations
^^^^^^^^^^^^^^^^^^^^^
There are two forms of function declaration. Inline functions can only perform
one statement. Functions with bodies can perform a set of statements and must
use the 'return' keyword to return a result.

Examples
++++++++
[source,csharp]
-------------------------------------
function diameter_to_radius(d) = d/2;

function calculate(c) {
  const a=12;
  b=c/a;
  return b;
}
-------------------------------------

Builtin Functions
^^^^^^^^^^^^^^^^^

Sqrt
++++
Returns the square root of a number. Negative values are not supported.

Sin
+++
Returns the sine of a number. Angles are given in radians.

Cos
+++
Returns the cosine of a number. Angles are given in radians.

Tan
+++
Returns the tangent of a number. Angles are given in radians.



3D Primitive Modules
~~~~~~~~~~~~~~~~~~~~

RapCAD supports a set of built in 3D primitives. The primitives are modules
that take arguments which specify the size and shape of the primitive. A module
is instanciated by writing its name followed by parenthesis which enclose the
arguments. Since it is also a statement it must be followed by a semicolon.

.Syntax
******************************
<argument> ::= ::
	<expression> +
	| <identifier> = <expression>

<instance> ::= ::
	<identifier> ( <argument> ); +
	| <identifier> ( <argument> , <argument>... );
******************************


Cube
^^^^

Examples
++++++++
[source,csharp]
------------------------------
cube(size,center);
cube(s,c);
------------------------------

Sphere
^^^^^^

Examples
++++++++
[source,csharp]
------------------------------
sphere(radius);
sphere(r);
------------------------------

Cylinder
^^^^^^^

RapCAD suports legacy 'r1' and 'r2' parameters on cylinder. The <<_cone,cone>> module
is more appropriate for drawing cones.

Examples
++++++++
[source,csharp]
------------------------------
cylinder(radius,height,center);
cylinder(r,h,c);
------------------------------

Cone
^^^^

Examples
++++++++
[source,csharp]
------------------------------
cone(radius1,radius2,center);
cone(r1,r2,c);
------------------------------

Prism
^^^^^

Examples
++++++++
[source,csharp]
-----------------------------
prism(height,sides,apothem);
prism(height,sides,radius);
-----------------------------

Polyhedron
^^^^^^^^^^

RapCAD supports a legacy 'triangles' parameter, but the name is a bit
misleading since polygons with more than three points can be specified using
this parameter. The name 'surfaces' was chosen in preference to 'polygons' so
as not to have a single letter name conflict with 'points'.

Examples
++++++++
[source,csharp]
------------------------------
polyhedron(points,surfaces);
polyhedron(p,s);
------------------------------

2D Primitive Modules
~~~~~~~~~~~~~~~~~~~~

Square
^^^^^^

Examples
++++++++
[source,csharp]
------------------------------
square(size,center);
square(s,c);
------------------------------

Circle
^^^^^^

Examples
++++++++
[source,csharp]
------------------------------
circle(radius);
circle(r);
------------------------------

Polygon
^^^^^^^

RapCAD supports a legacy parameter 'paths' this however conflicts with the
single letter parameter name 'points'.

Examples
++++++++
[source,csharp]
------------------------------
polygon(points,lines);
polygon(p,l);
------------------------------

Polyline
^^^^^^^^

Examples
++++++++
[source,csharp]
------------------------------
polyline(points);
------------------------------

Bezier Surface
^^^^^^^^^^^^^^

Examples
++++++++
[source,csharp]
------------------------------
bezier_surface(mesh);
------------------------------

Control Modules
~~~~~~~~~~~~~~~

Echo
^^^^

The echo module allows you to debug values that are evaluated as part of your
script. You can pass more than one argument to echo and it will be output to
the console. Named arguments are allowed but the names will not be echo'ed.

Examples
++++++++
[source,csharp]
------------------------------
echo(53+9);
echo([32,24,10]);
echo(a=1,b=2);
------------------------------

Bounds
^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
bounds()cube(10);
-------------------------------

Child
^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
child();
-------------------------------

Operation Modules
~~~~~~~~~~~~~~~~~

Union
^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
union() { module1(); module2(); }
-------------------------------

Group
^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
group() { module1(); module2(); }
-------------------------------

Difference
^^^^^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
difference() { module1(); module2(); }
-------------------------------

Symmetric Difference
^^^^^^^^^^^^^^^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
symmetric_difference() { module1(); module2(); }
-------------------------------

Intersection
^^^^^^^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
intersection() { module1(); module2(); }
-------------------------------

Minkowski Sum
^^^^^^^^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
minkowski() { module1(); module2(); }
-------------------------------

Glide
^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
glide() { module1(); module2(); }
-------------------------------

Hull
^^^^

Examples
++++++++
[source,csharp]
-------------------------------
hull() { module1(); module2(); }
-------------------------------

Sub Division
^^^^^^^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
subdiv() module1();
-------------------------------

Transformation Modules
~~~~~~~~~~~~~~~~~~~~~~

Linear Extrude
^^^^^^^^^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
linear_extrude(h=10) square([10,10]);
-------------------------------

Mirror
^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
mirror() translate([0,20,0]) cylinder(r=5,h=10);
-------------------------------

Offset
^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
offset() module1();
-------------------------------

Rotate
^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
rotate([0,0,90]) module1();
-------------------------------

Scale
^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
scale([0.1,0.1,0.1]) module1();
-------------------------------

Shear
^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
shear() module1();
-------------------------------

Translate
^^^^^^^^^

Examples
++++++++
[source,csharp]
-------------------------------
translate([0,20,0]) module1();
-------------------------------

include::compiling.asciidoc[]
