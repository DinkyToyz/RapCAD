--- a/usr/include/CGAL/Nef_3/ID_support_handler.h
+++ b/usr/include/CGAL/Nef_3/ID_support_handler.h
@@ -38,8 +38,21 @@ class ID_support_handler<SNC_indexed_items, Decorator> {
   typedef typename Decorator::SHalfloop_const_handle SHalfloop_const_handle;
   typedef typename Decorator::Halffacet_const_handle Halffacet_const_handle;
 
-  typedef CGAL::Unique_hash_map<Halffacet_const_handle, int> F2E;
-  CGAL::Unique_hash_map<Halffacet_const_handle, F2E> f2m;
+  struct Halffacet_pair
+  {
+    Halffacet_const_handle f1;
+    Halffacet_const_handle f2;
+  };
+
+  struct Handle_pair_hash_function {
+    std::size_t operator() (const Halffacet_pair& p) const {
+      std::size_t hash = 53;
+      hash = 97 * hash + Handle_hash_function()(p.f1);
+      hash = 97 * hash + Handle_hash_function()(p.f2);
+      return hash;
+    }
+  };
+  CGAL::Unique_hash_map<Halffacet_pair, int, Handle_pair_hash_function> f2m;
   std::map<int, int> hash;
 
  public:
@@ -76,17 +89,17 @@ class ID_support_handler<SNC_indexed_items, Decorator> {
     CGAL_NEF_TRACEN("hash_facet_pair " << sv->point() << std::endl
                     << "  " << f1->plane() << &f1 << std::endl
                     << " "  << f2->plane() << &f2);
-
-    if(f2m[f1][f2]==0) {
+    int& idx=f2m[{f1,f2}];
+    if(idx==0) {
       sv->set_index();
-      f2m[f1][f2] = sv->get_index();
+      idx = sv->get_index();
       CGAL_NEF_TRACEN("insert " << sv->point() << &*sv
-                      << ": " << f2m[f1][f2]);
+                      << ": " << idx);
       CGAL_NEF_TRACEN("not defined, yet");
     }
     else {
       CGAL_NEF_TRACEN("access " << sv->point() << &*sv);
-      sv->set_index(f2m[f1][f2]);
+      sv->set_index(idx);
     }
   }
 

